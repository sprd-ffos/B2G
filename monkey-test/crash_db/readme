1 首先，我们通过一个脚本获取cr的特征。这里我们的特征分成两个方面
    1 作为条目的特征，放在feature文件中，我们将各特征用冒号隔开
    2 cr的栈，我们将栈提炼之后放到一个文件中，用于与其他cr的栈比较
2 对于生成的cr特征，我们将其增加分析数据库中，如果没有数据库则创建数据库
3 在我们提取特征的时候，我们对于某次增加的cr，我们会特别的将其feature备份到feature.new之中，然后将feature.new中对应的cr与数据库中的cr比较，并放入数据库中，并生成相应的报告
4 如果我们需要重新建立数据库，则将之前的数据库删除，并复制feature到feature.new，然后调用相同的处理，生成数据库

这样，我们需要如下的脚本
1 获取cr的特征，并将特征加入到feature及feature.new
2 快速比较两个cr是否类同——这始终是一个脚本，返回是或者不是
3 处理一个cr，判定其是否与数据库中某个相同，或者是一个新的cr
4 处理feature.new中所有的cr
5 rebase数据库的脚本

add_cr.sh            - 将cr增加到当前数据库
add_folder.sh        - 将一个目录的cr增加到当前数据库
crdb.config          - 数据库配置
extract_folder.sh    - 提取一个目录的cr
extract.sh           - 提取单个cr
now_report.sh        - 生成服务器上当前cr的报告
parse_cr.sh          - 分析对比某个cr
parse_new.sh         - 分析对比.new文件中的所有cr
readme               - this
rebase.sh            - 修改配置后重建数据库，根据原始数据：feature&stack
report.sh            - 生成当前数据库的报告
same.sh              - 判定两个cr是否类似

通常用法：
1 ./now_report.sh
    该脚本用于从服务器上复制所有cr到本地，并分析cr，输出简单的报告
2 ./report.sh 
    --dev device --usr user --time-from time --time-to time [--help|-h]
    用于从当前数据库中检索出符合条件的cr报告，生成树状格式，一个cr只可能是以下两种情况之一
    1 是一个新的cr
    2 与过去的某个cr类似
    生成的报告名称在config文件中配置，默认配置是crash_report.html



--change log
1305061822
增加report的detail功能，支持在report界面打开本地备份的tar.bz2文件
1305061822
增加tar包备份，将所有解析过的tar包都在本地目录保留一份。用于后续察看详情
1305061822
修改usr支持模糊查找，支持忽律大小写。
1305061822
修改生成的报告没有清空之前的报告的bug

